---
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Login con Reconocimiento Facial</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .container {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        text-align: center;
        max-width: 500px;
        width: 90%;
      }
      
      h1 {
        color: #333;
        margin-bottom: 1rem;
        font-size: 2rem;
      }
      
      .subtitle {
        color: #666;
        margin-bottom: 2rem;
      }
      
      .camera-container {
        position: relative;
        margin: 2rem auto;
        border-radius: 10px;
        overflow: hidden;
        background: #f0f0f0;
        width: 320px;
        height: 240px;
      }
      
      #video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      
      .camera-placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #999;
        font-size: 1.1rem;
      }
      
      .buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin: 2rem 0;
      }
      
      button {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
      }
      
      .btn-primary {
        background: #667eea;
        color: white;
      }
      
      .btn-primary:hover {
        background: #5a6fd8;
        transform: translateY(-2px);
      }
      
      .btn-secondary {
        background: #f8f9fa;
        color: #333;
        border: 2px solid #e9ecef;
      }
      
      .btn-secondary:hover {
        background: #e9ecef;
      }
      
      .btn-success {
        background: #28a745;
        color: white;
      }
      
      .btn-success:hover {
        background: #218838;
      }
      
      .status {
        margin: 1rem 0;
        padding: 1rem;
        border-radius: 8px;
        font-weight: 500;
      }
      
      .status.info {
        background: #e7f3ff;
        color: #0066cc;
        border: 1px solid #b3d9ff;
      }
      
      .status.success {
        background: #e8f5e8;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      
      .status.error {
        background: #ffe6e6;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      
      .hidden {
        display: none;
      }
      
      .user-info {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin-top: 1rem;
      }
      
      .user-info h3 {
        color: #28a745;
        margin-bottom: 0.5rem;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>🔐 Login Facial</h1>
      <p class="subtitle">Usa tu rostro para acceder de forma segura</p>
      
      <div class="camera-container">
        <video id="video" class="hidden"></video>
        <div id="placeholder" class="camera-placeholder">
          📷 Cámara no iniciada
        </div>
      </div>
      
      <div class="buttons">
        <button id="startCamera" class="btn-secondary">Iniciar Cámara</button>
        <button id="loginBtn" class="btn-primary hidden">Iniciar Sesión</button>
        <button id="registerBtn" class="btn-success hidden">Registrar Rostro</button>
      </div>
      
      <div id="status" class="status hidden"></div>
      
      <div id="userInfo" class="user-info hidden">
        <h3>¡Bienvenido!</h3>
        <p>Has iniciado sesión correctamente</p>
        <button id="logoutBtn" class="btn-secondary" style="margin-top: 1rem;">Cerrar Sesión</button>
      </div>
    </div>

    <script>
      class FacialRecognitionApp {
        constructor() {
          this.video = document.getElementById('video');
          this.placeholder = document.getElementById('placeholder');
          this.startCameraBtn = document.getElementById('startCamera');
          this.loginBtn = document.getElementById('loginBtn');
          this.registerBtn = document.getElementById('registerBtn');
          this.logoutBtn = document.getElementById('logoutBtn');
          this.status = document.getElementById('status');
          this.userInfo = document.getElementById('userInfo');
          
          this.serverUrl = 'http://localhost:8000';
          this.stream = null;
          
          this.initEventListeners();
          this.checkExistingSession();
        }
        
        initEventListeners() {
          this.startCameraBtn.addEventListener('click', () => this.startCamera());
          this.loginBtn.addEventListener('click', () => this.attemptLogin());
          this.registerBtn.addEventListener('click', () => this.registerFace());
          this.logoutBtn.addEventListener('click', () => this.logout());
        }
        
        async startCamera() {
          try {
            this.stream = await navigator.mediaDevices.getUserMedia({ 
              video: { width: 320, height: 240 } 
            });
            
            this.video.srcObject = this.stream;
            this.video.play();
            
            this.video.classList.remove('hidden');
            this.placeholder.classList.add('hidden');
            this.startCameraBtn.classList.add('hidden');
            this.loginBtn.classList.remove('hidden');
            this.registerBtn.classList.remove('hidden');
            
            this.showStatus('Cámara iniciada correctamente', 'info');
          } catch (error) {
            this.showStatus('Error al acceder a la cámara: ' + error.message, 'error');
          }
        }
          checkExistingSession() {
    const userData = sessionStorage.getItem('user');
    if (userData) {
      // Si hay datos de usuario, mostrar opción de continuar sesión
      this.showStatus('Ya tienes una sesión activa', 'info');
      
      const continueBtn = document.createElement('button');
      continueBtn.textContent = 'Continuar a Dashboard';
      continueBtn.className = 'btn-success';
      continueBtn.style.marginTop = '1rem';
      continueBtn.onclick = () => window.location.href = '/dashboard';
      
      const logoutBtn = document.createElement('button');
      logoutBtn.textContent = 'Cerrar Sesión Actual';
      logoutBtn.className = 'btn-secondary';
      logoutBtn.style.marginLeft = '1rem';
      logoutBtn.onclick = () => this.logout();
      
      const buttonsDiv = document.createElement('div');
      buttonsDiv.appendChild(continueBtn);
      buttonsDiv.appendChild(logoutBtn);
      
      this.status.after(buttonsDiv);
    }
  }
    async logout() {
    try {
      const userData = JSON.parse(sessionStorage.getItem('user'));
      
      if (userData && userData.user_id) {
        await fetch(`${this.serverUrl}/logout`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ user_id: userData.user_id })
        });
      }
      
      sessionStorage.removeItem('user');
      this.showStatus('Sesión cerrada correctamente', 'success');
      
      // Recargar la página para reiniciar la aplicación
      setTimeout(() => window.location.reload(), 1500);
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
      sessionStorage.removeItem('user');
      this.showStatus('Error al cerrar sesión, pero datos locales eliminados', 'error');
    }
  }
        captureFrame() {
          const canvas = document.createElement('canvas');
          canvas.width = this.video.videoWidth;
          canvas.height = this.video.videoHeight;
          
          const ctx = canvas.getContext('2d');
          ctx.drawImage(this.video, 0, 0);
          
          return canvas.toDataURL('image/jpeg', 0.8);
        }
        
        async attemptLogin() {
          if (!this.video.videoWidth) {
            this.showStatus('Espera a que la cámara esté lista', 'error');
            return;
          }
          
          this.showStatus('Analizando rostro...', 'info');
          
          try {
            const imageData = this.captureFrame();
            
            const response = await fetch(`${this.serverUrl}/login`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ image: imageData })
            });
            
            const result = await response.json();
            
            if (result.success) {
              this.showStatus('¡Login exitoso! Redirigiendo...', 'success');
              
              // Guardar datos del usuario en sessionStorage
              sessionStorage.setItem('user', JSON.stringify(result.data));
              
              // Redireccionar después de un breve delay
              setTimeout(() => {
                window.location.href = '/dashboard';
              }, 1500);
            } else {
              this.showStatus(result.message || 'Rostro no reconocido', 'error');
            }
          } catch (error) {
            this.showStatus('Error de conexión con el servidor', 'error');
          }
        }
        
        async registerFace() {
          if (!this.video.videoWidth) {
            this.showStatus('Espera a que la cámara esté lista', 'error');
            return;
          }
          
          const name = prompt('Ingresa tu nombre para el registro:');
          if (!name) return;
          
          this.showStatus('Registrando rostro...', 'info');
          
          try {
            const imageData = this.captureFrame();
            
            const response = await fetch(`${this.serverUrl}/register`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ 
                image: imageData,
                name: name
              })
            });
            
            const result = await response.json();
            
            if (result.success) {
              this.showStatus('Rostro registrado correctamente', 'success');
            } else {
              this.showStatus(result.message || 'Error en el registro', 'error');
            }
          } catch (error) {
            this.showStatus('Error de conexión con el servidor', 'error');
          }
        }
        
        showUserInfo() {
          this.userInfo.classList.remove('hidden');
          this.loginBtn.classList.add('hidden');
          this.registerBtn.classList.add('hidden');
        }
        
        logout() {
          this.userInfo.classList.add('hidden');
          this.loginBtn.classList.remove('hidden');
          this.registerBtn.classList.remove('hidden');
          this.showStatus('Sesión cerrada', 'info');
        }
        
        showStatus(message, type) {
          this.status.textContent = message;
          this.status.className = `status ${type}`;
          this.status.classList.remove('hidden');
          
          setTimeout(() => {
            this.status.classList.add('hidden');
          }, 3000);
        }
      }
      
      // Inicializar la aplicación
      new FacialRecognitionApp();
    </script>
  </body>
</html>
